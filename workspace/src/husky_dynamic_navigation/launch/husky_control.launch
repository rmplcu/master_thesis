<?xml version="1.0"?>
<launch>

  <!-- <arg name="multimaster" default="$(optenv ROBOT_MULTIMASTER false)"/> -->
  <arg name="simulation" default="$(optenv ROBOT_SIMULATION false)"/>
  <arg name="robot_namespace" default="$(optenv ROBOT_NAMESPACE robot)"/>
  <arg name="enable_ekf" default="$(optenv ENABLE_EKF true)"/>

  <arg name="husky_num" default="husky2" />

  <arg name="config_extras" default="$(eval optenv('HUSKY_CONFIG_EXTRAS', find('husky_control') + '/config/empty.yaml'))"/>

  <!-- Only one of laser_front_back and realsense should be enabled -->
  <!-- realsense and side_lasers can be enabled at the same time  -->
  <!-- side_lasers and laser_front_back cannot be enabled at the same time -->
  <arg name="laser_front_back" default="0"/>
  <arg name="side_lasers" default="1"/>
  <arg name="realsense_enabled" default="1"/>

  <arg name="min_height" default="0.0"/>
  <arg name="max_height" default="1.0"/>
  <arg name="laser_range_max" default="13"/>
  <arg name="laser_range_min" default="0.1"/>

  <param name="robot_description" command="$(find xacro)/xacro '$(find husky_dynamic_navigation)/urdf/husky.urdf.xacro'
    robot_namespace:=$(arg robot_namespace) laser_ust10_rear_enabled:=1 laser_ust10_front_enabled:=1 tf_prefix:=$(arg husky_num)_tf" if="$(arg laser_front_back)"/>

  <param name="robot_description" command="$(find xacro)/xacro '$(find husky_dynamic_navigation)/urdf/husky.urdf.xacro'
  robot_namespace:=$(arg robot_namespace) side_lasers_enabled:=$(arg side_lasers) realsense_enabled:=$(arg realsense_enabled) tf_prefix:=$(arg husky_num)_tf" if="$(arg realsense_enabled)"/>

  <!-- Load controller configuration -->
  <rosparam command="load" file="$(find husky_dynamic_navigation)/config/control_$(arg husky_num).yaml" />

  <!-- PointCloud to laserscan -->
  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" if="$(arg realsense_enabled)">
    <param name="target_frame" value="$(arg husky_num)_tf/base_link"/>
    <param name="range_max" value="$(arg laser_range_max)"/>
    <param name="range_min" value="$(arg laser_range_min)"/>
    <param name="min_height" value="$(arg min_height)"/>
    <param name="max_height" value="$(arg max_height)"/>

    <remap from="scan" to="$(arg robot_namespace)/3d_scan" if="$(arg side_lasers)"/>
    <remap from="scan" to="$(arg robot_namespace)/scan" unless="$(arg side_lasers)"/>
    <remap from="cloud_in" to="$(arg robot_namespace)/realsense/depth/color/points"/>
  </node>

  <!-- Laser merger node -->
  <node pkg="ira_laser_tools" name="laserscan_multi_merger" type="laserscan_multi_merger" if="$(arg laser_front_back)">
    <param name="destination_frame" value="$(arg husky_num)_tf/base_link"/>
    <param name="cloud_destination_topic" value="/$(arg husky_num)/merged_cloud"/>
    <param name="scan_destination_topic" value="/$(arg husky_num)/scan"/>

    <param name="laserscan_topics" value="/$(arg husky_num)/front/scan /$(arg husky_num)/rear/scan" />

    <param name="angle_min" value="-3.14"/>
    <param name="angle_max" value="3.14"/>
    <param name="range_min" value="$(arg laser_range_min)"/>
    <param name="range_max" value="$(arg laser_range_max)"/>
  </node>

  <node pkg="ira_laser_tools" name="laserscan_multi_merger" type="laserscan_multi_merger" if="$(eval arg('realsense_enabled') and arg('side_lasers'))">
    <param name="destination_frame" value="$(arg husky_num)_tf/base_link"/>
    <param name="cloud_destination_topic" value="/$(arg husky_num)/merged_cloud"/>
    <param name="scan_destination_topic" value="/$(arg husky_num)/scan"/>

    <param name="laserscan_topics" value="/$(arg husky_num)/3d_scan /$(arg husky_num)/right/scan /$(arg husky_num)/left/scan" />

    <param name="angle_min" value="-3.14"/>
    <param name="angle_max" value="3.14"/>
    <param name="range_min" value="$(arg laser_range_min)"/>
    <param name="range_max" value="$(arg laser_range_max)"/>
  </node>

  <!-- Spawn controllers -->
  <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="husky_joint_publisher husky_velocity_controller"/>
  <rosparam param="wheel_radius_multiplier" ns="husky_velocity_controller" subst_value="True">
            $(optenv HUSKY_WHEEL_MULTIPLIER 1.0)
  </rosparam>

  <remap from="odom" to="/$(arg husky_num)/husky_velocity_controller/odom"/>
  <remap from="cmd_vel" to="/$(arg husky_num)/cmd_vel"/>

  <!-- Start EKF for localization -->
  <group if="$(arg enable_ekf)" >
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
      <rosparam command="load" file="$(find husky_dynamic_navigation)/config/localization_$(arg husky_num).yaml" />
    </node>
  </group>

  <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen">
    <param name="link_name" value="$(arg husky_num)_tf/base_link" />
  </node>

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <node pkg="twist_mux" type="twist_mux" name="twist_mux">
    <rosparam command="load" file="$(find husky_dynamic_navigation)/config/twist_mux_$(arg husky_num).yaml" />
    <remap from="cmd_vel_out" to="husky_velocity_controller/cmd_vel"/>
  </node>

  <!-- Override the default control parameters, see config/empty.yaml for default. -->
  <rosparam command="load" file="$(arg config_extras)" subst_value="true" />
</launch>